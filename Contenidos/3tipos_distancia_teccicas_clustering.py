# -*- coding: utf-8 -*-
"""3Tipos_Distancia_Teccicas_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDo-rDazRjE_zoqf_wt6U79sbrSK3OL_
"""

# Clusterización: Métricas de Distancia
# Contexto y Datos

import numpy as np
import matplotlib.pyplot as plt

# Cargar datos
datos = np.loadtxt("/content/venta_propiedades.csv", delimiter=',')

# Graficar datos
plt.figure(figsize=(6, 6))
plt.scatter(datos[:, 0], datos[:, 1], c=np.linspace(0, 1, datos.shape[0]), s=300, alpha=0.6)
plt.xlabel('Antiguedad de la construcción en Años', fontsize=14)
plt.ylabel('Precio de casa en Pesos (1:100,0000)', fontsize=14)
plt.box(False)
plt.show()

# =================================================================================================

# Métricas de Distancia entre Vecinos
# DBSCAN - Scilit-learn
from sklearn.cluster import DBSCAN

# Cargar datos
datos = np.loadtxt('/content/venta_propiedades.csv', delimiter=',')

# Identificar clusters con diferentes distancias
distancias = ["euclidean", "chebyshev", "manhattan"]

fig = plt.figure(figsize=(12, 4))
plt.set_cmap("plasma")

for d in range(len(distancias)):
  clusters = DBSCAN(2, min_samples=10, metric=distancias[d]).fit_predict(datos)
  ax = fig.add_subplot(1, 3, d+1)

  # puntos considerados ruido
  ax.scatter(datos[clusters==-1][:, 0], datos[clusters==-1][:, 1], c='lightgray', s=200, marker=2)

  # puntos pertenecientes a clusters
  ax.scatter(datos[clusters >= 0][:, 0], datos[clusters >= 0][:, 1],
             c=clusters[clusters>=0], s=200, linewidth=0.5, edgecolor='black')
  ax.set_title(distancias[d].capitalize(), fontsize=24)
  ax.axis('off')

plt.show()