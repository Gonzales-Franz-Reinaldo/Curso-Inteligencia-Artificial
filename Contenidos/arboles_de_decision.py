# -*- coding: utf-8 -*-
"""Arboles_de_Decision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDo-rDazRjE_zoqf_wt6U79sbrSK3OL_
"""

# Gráfica dispersión : Edad y Colesterol

import pandas as pd
import matplotlib.pyplot as plt

pacientes = pd.read_csv("/content/pacientes.csv")

# print(pacientes)

saludables = pacientes[pacientes["problema_cardiaco"] == 0]
cardiacos = pacientes[pacientes["problema_cardiaco"] == 1]

plt.figure(figsize=(6, 6))
plt.xlabel("Edad", fontsize = 20.0)
plt.ylabel("Colesterol", fontsize = 20.0)
plt.scatter(saludables["Edad"], saludables["Colesterol"],
            label="Saludable (Clase: 0)", marker="*", c="skyblue", s=200)
plt.scatter(cardiacos["Edad"], cardiacos["Colesterol"],
            label='Cardiaco (Clase: 1)', marker='*', c='lightcoral', s=200)
plt.legend(bbox_to_anchor=(1, 0.15))
plt.show()

# ===================================================================================================

# Entropía:
# Promedio de información almacenada en una variable aleatoria

from scipy.stats import entropy
from math import log
import pandas as pd

# print(entropy([1/2, 1/2], base=2))
# print(entropy([10/10, 0/10], base=2))

edades = pd.Series([40, 30, 20, 50])
colesterol = pd.Series([100, 110, 100, 110])

print(edades.value_counts()/ edades.size)
print(colesterol.value_counts() / colesterol.size)
print(entropy(edades.value_counts()/edades.size, base=2))
print(entropy(colesterol.value_counts()/colesterol.size, base=2))

# ===================================================================================================

# Datos de Entrenamiento y Prueba
from sklearn.model_selection import train_test_split

datos_entrena, datos_prueba, clase_entrena, clase_prueba = train_test_split(
    pacientes[['Edad', 'Colesterol']],
    pacientes['problema_cardiaco'],
    test_size=0.30
)

# ===================================================================================================

# Creación del Árbol de Decisión
from sklearn import tree

arbol_decision = tree.DecisionTreeClassifier(criterion='entropy', max_depth=2)

arbol = arbol_decision.fit(datos_entrena, clase_entrena)
accuracy = arbol_decision.score(datos_prueba, clase_prueba)

print(accuracy)
print(tree.export_text(arbol, feature_names=["Edad", "Colesterol"]))

plt.figure(figsize=(12, 6))
tree.plot_tree(arbol, feature_names=["Edad", "Colesterol"])
plt.show()

# ===================================================================================================

# Clasifica a nuevos pacientes
print("Nuevo paciente", arbol_decision.predict([[70, 150]]))