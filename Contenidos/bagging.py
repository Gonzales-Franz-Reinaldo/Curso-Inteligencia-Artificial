# -*- coding: utf-8 -*-
"""Bagging.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDo-rDazRjE_zoqf_wt6U79sbrSK3OL_
"""

# Baggin: Meta Estimdor
# Clasificación y Regresión
# Datos salariales
import pandas as pd

personas = pd.read_csv("/content/salario.csv")

personas

# N Muestreos para N Modelos
for i in range(5):
  print(personas.sample(frac=1/10), "\n") # muestreo de 5 modelos

# Escalamiento de los Datos
from sklearn.preprocessing import MinMaxScaler

personas = MinMaxScaler().fit_transform(personas)
personas

# Visualización de los datos

# Estudio, Horas, Edad -> Salario

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(14, 5))

# Gráfica de dispersión -> Edad, Estudio y Horas
ax = fig.add_subplot(1, 3, 1, projection='3d')
colores = ('pink', 'purple')

for clase in (0, 1):
  ax.scatter(personas.T[0][personas.T[3] == clase],
             personas.T[1][personas.T[3] == clase],
             personas.T[2][personas.T[3] == clase],
             marker='*', c=colores[clase], s=200)

ax.set_xlabel("Edad", size=14)
ax.set_ylabel("Estudio", size=14)
ax.set_zlabel("Horas", size=14)
ax.view_init(45, 45)

# Histograma -> clase salarial
ax = fig.add_subplot(1, 3, 2)
ax.hist(personas.T[3], bins=2, histtype='step', color='indianred')
ax.set_ylabel("Salario", size=14)
ax.set_xlabel("Persona", size=14)
plt.setp(ax.spines.values(), linewidth=0)

# Visualización de salario de las personas
ax = fig.add_subplot(1, 3, 3)
ax.plot(personas.T[4], marker='o', linewidth=0, color='purple')
ax.plot([0.5]*100, linewidth=5)
ax.set_ylabel("Salario", size=14)
ax.set_xlabel("Persona", size=14)
plt.setp(ax.spines.values(), linewidth=0)
plt.show()

# Creación de Meta-modelos Bagging
# Estimador base: K-vecinos más cercanos KNN

from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import BaggingRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score

# Separando las características de las variables objetivos
datos = personas.T[:-2].T # features
clase = personas.T[3] # clase de salario
valor = personas.T[4] # salario numérico

# Clasificador base y regresor base
clasificador = KNeighborsClassifier(n_neighbors=3)
regresor = KNeighborsRegressor(n_neighbors=3)

n = 50 # números de modelos: 1 vs 50

# Modelos bagging para clasificación y regresión con 30% de muestra
meta_clasificador = BaggingClassifier(base_estimator=clasificador,
                                      n_estimators=n,
                                      max_samples=0.30).fit(datos, clase)

meta_regresor = BaggingRegressor(base_estimator=regresor,
                                 n_estimators=n,
                                 max_samples=0.30).fit(datos, valor)

# Métricas relevantes para clasificación y determinación
print("Accuracy:", round(accuracy_score(clase, meta_clasificador.predict(datos)), 2))
print("Coeficiente de determinación:", r2_score(valor, meta_regresor.predict(datos)))

