# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRkbtRbnxR-sQS0qQuFLl6nlnKL2cN7g
"""

# Regresión lineal con Gradiente Dscendiente

import numpy as np  # cuando trabajamos con vectores
import matplotlib.pyplot as plt
import sympy as sym  # nos permite aplicar deribadas parciales
from sklearn.linear_model import LinearRegression

# variable independiente
experiencia = np.array([[5], [6], [13]])

# variable objetivo
salario = np.array([6.85, 16.83, 26.84])

# Modelo lineal creado con los mínimos cuadrados
modelo = LinearRegression().fit(experiencia.reshape(3, -1), salario)

# visualización de datos y modelo
print("Intersección con eje Y (b): %0.2f"  % modelo.intercept_)
print("Pendiente (m): %0.2f" % modelo.coef_[0])
print("Suma de cuadrados de los Residuos (RSS): %0.2f" % ((salario - modelo.predict(experiencia))**2).sum())

plt.figure(figsize=(8, 6)) # tamaño de la figura

plt.scatter(experiencia, salario, color="gold", s=250, marker="o", label="Valor verdadero")

plt.scatter(experiencia, modelo.predict(experiencia), color="blue", s=250, marker="P", label="Valor predicho")

plt.plot(experiencia, modelo.predict(experiencia), color="deeppink", label="Modelo lineal")

experiencia = experiencia.reshape(3)

plt.ylabel("Salario en miles de Pesos ($)", size = 16)
plt.xlabel("Años de experiencia", size = 16)
plt.legend(bbox_to_anchor = (1.3, 0.5))

plt.grid()  # Permite colocar lineas cuadriculares en la grafica
plt.box(False) #False elimina la linea del borde de la grafica
plt.show()

# Diferente Modelos con diferentes pendientes

# Creación de multiples pendientes para exploración
pendientes = np.arange(2.5, 1.6, -0.1)

# Vector para almacenar el error de los diferentes modelos
errores = np.array([])

# Visualización de modelos
plt.figure(figsize=(8, 6))

for pendiente in pendientes:
  # Error del modelo (suma de cuadrados de los Residuos)
  error = ((pendiente * experiencia - salario)**2).sum()

  # Visualización de un modelo para un pendiente dada
  plt.plot(experiencia, pendiente * experiencia, linewidth = 4,
           label = "m: %0.2f | error: %0.2f" % (pendiente, error))
  errores = np.append(errores, error)

plt.scatter(experiencia, salario, color="gold", s=250, marker="o", label="Valor verdadero")

plt.ylabel("Salario en miles de Pesos ($)", size = 16)
plt.xlabel("Años de experiencia", size = 16)
plt.legend(bbox_to_anchor = (1, 0.5))

plt.grid()  # Permite colocar lineas cuadriculares en la grafica
plt.box(False) #False elimina la linea del borde de la grafica
plt.show()

# Visualización de los Errores (RSS)

plt.figure(figsize=(7.5, 6))
plt.title("Suma de cuadrados de los Residuos (RSS)", size = 16)
plt.ylabel("Error (RSS)", size = 16)
plt.xlabel("Pendiente (m)", size = 16)
plt.scatter(pendientes, errores, color = "purple", marker = "D", s = 99) # Dispersión
plt.grid()
plt.box(False)
plt.show()