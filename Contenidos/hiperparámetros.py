# -*- coding: utf-8 -*-
"""Hiperparámetros.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDo-rDazRjE_zoqf_wt6U79sbrSK3OL_
"""

# Hiperparámetros
import pandas as pd

personas = pd.read_csv("/content/ingresos.csv")
personas

# =========================================================================================

from sklearn.ensemble import RandomForestClassifier

bosque = RandomForestClassifier()
bosque.get_params()

# =========================================================================================

# Búsqueda de Cuadrícula (o Rejilla)
from sklearn.model_selection import GridSearchCV

parametros = {"criterion" : ("gini", "entropy"),
              "n_estimators" : (10, 20, 30),
              "max_samples" : (1/3, 2/3)}

rejilla = GridSearchCV(bosque, parametros, scoring="accuracy")

rejilla.fit(personas[personas.columns[:-1]].values, personas["ingreso"].values)

# =========================================================================================

# Información de la Búsqueda en Regilla
sorted(rejilla.cv_results_.keys())

# =========================================================================================

# Regilla de Parámetros Explorados
rejilla.cv_results_["params"]

# =========================================================================================

# Resultados de la Búsqueda en Rejilla
print(rejilla.cv_results_["rank_test_score"])
print(rejilla.cv_results_["mean_test_score"])
print(rejilla.best_score_)
print(rejilla.best_params_)

# =========================================================================================

# Usando/Extrayendo el mejor modelo
print(rejilla.predict([[50, 16, 1, 1, 40]]))
mejor_bosque = rejilla.best_estimator_
print(mejor_bosque.predict([[50, 16, 1, 1, 40]]))

# =========================================================================================

# Búsqueda Aleatoria de Hiperparámetros
from sklearn.model_selection import RandomizedSearchCV

parametros = {"criterion" : ("gini", "entropy"),
              "n_estimators" : (10, 20, 30),
              "max_samples" : (1/3, 2/3)}

rejilla_aleatoria = RandomizedSearchCV(bosque, parametros, scoring="accuracy", cv=5, n_iter=3)

rejilla_aleatoria.fit(personas[personas.columns[:-1]].values, personas["ingreso"].values)

# =========================================================================================

# Parámetros Explorados Aleatoriamente
rejilla_aleatoria.cv_results_["params"]

# =========================================================================================

# Mejores Parámetros (seleccionados aleatoriamente
print(rejilla_aleatoria.best_score_)
print(rejilla_aleatoria.best_params_)