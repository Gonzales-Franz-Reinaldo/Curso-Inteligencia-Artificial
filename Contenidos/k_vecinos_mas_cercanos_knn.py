# -*- coding: utf-8 -*-
"""K-vecinos_mas_cercanos_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDo-rDazRjE_zoqf_wt6U79sbrSK3OL_
"""

# K-vecinos más cercanos (KNN)
# Datos de clientes bancarios: crédito

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier

clientes = pd.read_csv('/content/creditos.csv')
clientes

# =================================================================================================================

# Pagadores vs Deudores
buenos = clientes[clientes['cumplio']==1]
malos = clientes[clientes['cumplio']==0]

buenos, malos

# =================================================================================================================

# Gráfica: Pagadores VS Deudores
plt.scatter(buenos['edad'], buenos['credito'], marker='*', s=150, color='skyblue', label='Sí pagó (Clase: 1)')

plt.scatter(malos['edad'], malos['credito'], marker='*', s=150, color='red', label='No pagó (Clase: 0)')

plt.ylabel('Monto del crédito')
plt.xlabel('Edad')
plt.legend(bbox_to_anchor=(1, 0.2))
plt.show()

# =================================================================================================================

# Preparación de los datos (Escalar)
datos = clientes[['edad', 'credito']]
clase = clientes['cumplio']

escalador = preprocessing.MinMaxScaler()

datos = escalador.fit_transform(datos)
datos

# =================================================================================================================

# Creación del Modelo KNN
# Valor de K
clasificador = KNeighborsClassifier(n_neighbors=3)

clasificador.fit(datos, clase)

# =================================================================================================================

# Nuevo Solicitante (Clasificación)
edad = 60
monto = 350000

# Escalar los datos del nuevo solicitante
solicitante = escalador.transform([[edad, monto]])
print("Clase", clasificador.predict(solicitante))
print("Probabilidades por clase", clasificador.predict_proba(solicitante))

# Calcular clase y Probabilidades

# Código para graficar
plt.scatter(buenos['edad'], buenos['credito'],
            marker='*', s=150, color='skyblue', label="Si pagó (Clase: 1)")
plt.scatter(malos['edad'], malos['credito'],
            marker='*', s=150, color='red', label="No pagó (Clase: 0)")
plt.scatter(edad, monto, marker='P', s=250, color='green', label='Solicitante')
plt.ylabel('Monto del crédito')
plt.xlabel('Edad')
plt.legend(bbox_to_anchor=(1, 0.3))
plt.show()

# =================================================================================================================

# Regiones de las clases
# Pagadores vs Deudores

# Datos sinténticos de todos los posibles solicitantes
creditos = np.array([np.arange(100000, 600010, 1000)]*43).reshape(1, -1)
edades = np.array([np.arange(18, 61)]*501).reshape(1, -1)
todos = pd.DataFrame(np.stack((edades, creditos), axis=2)[0],
                     columns=['edad', 'credito'])

# Escalar los datos
solicitantes = escalador.transform(todos)

# Predecir todas las clases
clases_resultantes = clasificador.predict(solicitantes)

# Código para graficar
buenos = todos[clases_resultantes==1]
malos = todos[clases_resultantes==0]

plt.scatter(buenos['edad'], buenos['credito'],
            marker='*', s=150, color='skyblue', label='Si pagará (Clase: 1)')
plt.scatter(malos['edad'], malos['credito'],
            marker='*', s=150, color='red', label='No pagará (Clase: 0)')
plt.ylabel('Monto del crédito')
plt.xlabel('Edad')
plt.legend(bbox_to_anchor=(1, 0.2))
plt.show()